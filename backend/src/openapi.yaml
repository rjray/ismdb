openapi: 3.0.2
info:
  title: MyMoDB API
  version: "0.1"
servers:
  - url: /api
components:
  parameters:
    skipParam:
      name: skip
      in: query
      description: Number of query items to skip
      required: false
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: Maximum query records to return
      required: false
      schema:
        type: integer
        format: int32
  schemas:
    idType:
      type: integer
      format: int64
      minimum: 0
    dateTimeType:
      type: string
      format: date-time
    languageType:
      type: string
      maxLength: 50
    authorNameOrAliasType:
      type: string
      maxLength: 60
    magazineNameType:
      type: string
      maxLength: 50
    magazineAliasesType:
      type: string
      maxLength: 100
    magazineNotesType:
      type: string
      maxLength: 1000
    magazineIssueNumberType:
      type: string
      maxLength: 50
    referenceNameType:
      type: string
      maxLength: 255
    referenceTypeType:
      type: string
      maxLength: 75
    referenceIsbnType:
      type: string
      maxLength: 15
    referenceKeywordsType:
      type: string
      maxLength: 2000
    newAuthorAliasType:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/authorNameOrAliasType"
    authorAliasType:
      allOf:
        - $ref: "#/components/schemas/newAuthorAliasType"
        - type: object
          required:
            - id
            - authorId
          properties:
            id:
              $ref: "#/components/schemas/idType"
            authorId:
              $ref: "#/components/schemas/idType"
    newAuthorType:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/authorNameOrAliasType"
        aliases:
          type: array
          items:
            $ref: "#/components/schemas/newAuthorAliasType"
    selectedAuthorType:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/idType"
        name:
          $ref: "#/components/schemas/authorNameOrAliasType"
    authorType:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/idType"
        name:
          $ref: "#/components/schemas/authorNameOrAliasType"
        createdAt:
          $ref: "#/components/schemas/dateTimeType"
        updatedAt:
          $ref: "#/components/schemas/dateTimeType"
        aliases:
          type: array
          items:
            $ref: "#/components/schemas/authorAliasType"
    authorWithRefcountType:
      allOf:
        - $ref: "#/components/schemas/authorType"
        - type: object
          required:
            - refcount
          properties:
            refcount:
              type: integer
    authorWithReferencesType:
      allOf:
        - $ref: "#/components/schemas/authorWithRefcountType"
        - type: object
          required:
            - references
          properties:
            references:
              type: array
              items:
                $ref: "#/components/schemas/referenceType"
    newMagazineType:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/magazineNameType"
        language:
          $ref: "#/components/schemas/languageType"
        aliases:
          $ref: "#/components/schemas/magazineAliasesType"
        notes:
          $ref: "#/components/schemas/magazineNotesType"
    magazineType:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/idType"
        - $ref: "#/components/schemas/newMagazineType"
    magazineWithIssuesType:
      allOf:
        - $ref: "#/components/schemas/magazineType"
        - type: object
          properties:
            issues:
              type: array
              items:
                $ref: "#/components/schemas/abbreviatedMagazineIssueType"
    newMagazineIssueType:
      type: object
      required:
        - number
        - magazineId
      properties:
        number:
          $ref: "#/components/schemas/magazineIssueNumberType"
        magazineId:
          $ref: "#/components/schemas/idType"
    abbreviatedMagazineIssueType:
      type: object
      required:
        - id
        - number
      properties:
        id:
          $ref: "#/components/schemas/idType"
        number:
          $ref: "#/components/schemas/magazineIssueNumberType"
    magazineIssueType:
      allOf:
        - $ref: "#/components/schemas/abbreviatedMagazineIssueType"
        - type: object
          required:
            - Magazine
          properties:
            Magazine:
              $ref: "#/components/schemas/magazineType"
    magazineIssueWithReferencesType:
      allOf:
        - $ref: "#/components/schemas/magazineIssueType"
        - type: object
          required:
            - references
          properties:
            references:
              type: array
              items:
                $ref: "#/components/schemas/referenceType"
    recordTypeType:
      type: object
      required:
        - id
        - description
      properties:
        id:
          $ref: "#/components/schemas/idType"
        description:
          type: string
          maxLength: 50
        notes:
          type: string
          maxLength: 255
    newReferenceType:
      type: object
      required:
        - name
        - RecordTypeId
      properties:
        name:
          $ref: "#/components/schemas/referenceNameType"
        type:
          $ref: "#/components/schemas/referenceTypeType"
        isbn:
          $ref: "#/components/schemas/referenceIsbnType"
        language:
          $ref: "#/components/schemas/languageType"
        keywords:
          $ref: "#/components/schemas/referenceKeywordsType"
        RecordTypeId:
          $ref: "#/components/schemas/idType"
        MagazineIssueId:
          $ref: "#/components/schemas/idType"
        authors:
          type: array
          items:
            $ref: "#/components/schemas/selectedAuthorType"
    referenceType:
      type: object
      required:
        - id
        - name
        - RecordType
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/idType"
        name:
          $ref: "#/components/schemas/referenceNameType"
        type:
          $ref: "#/components/schemas/referenceTypeType"
        isbn:
          $ref: "#/components/schemas/referenceIsbnType"
        language:
          $ref: "#/components/schemas/languageType"
        keywords:
          $ref: "#/components/schemas/referenceKeywordsType"
        RecordType:
          $ref: "#/components/schemas/recordTypeType"
        MagazineIssue:
          $ref: "#/components/schemas/magazineIssueType"
        Magazine:
          $ref: "#/components/schemas/magazineType"
        authors:
          type: array
          items:
            $ref: "#/components/schemas/authorType"
        createdAt:
          $ref: "#/components/schemas/dateTimeType"
        updatedAt:
          $ref: "#/components/schemas/dateTimeType"
  responses: {}
paths:
  "/author":
    post:
      summary: Create a new author
      description: Create a new author using the data in the request body.
      operationId: createAuthor
      requestBody:
        description: Author to add
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/newAuthorType"
        required: true
      responses:
        "201":
          description: New author created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/authorType"
      tags:
        - Authors
    get:
      summary: Fetch all authors
      description: Fetch all authors as an array
      operationId: getAllAuthors
      responses:
        "200":
          description: All authors
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/authorType"
      tags:
        - Authors
  "/author/withRefCount":
    get:
      summary: Fetch all authors with reference counts
      description: Fetch all authors as an array, with each author record including the reference count
      operationId: getAllAuthorsWithRefCount
      responses:
        "200":
          description: All authors with reference counts
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/authorWithRefcountType"
      tags:
        - Authors
  "/author/{id}":
    parameters:
      - name: id
        in: path
        description: ID of author to operate on
        required: true
        schema:
          $ref: "#/components/schemas/idType"
    get:
      summary: Fetch a single author by ID
      description: Retrieve a single author by ID. Returns author and alias information.
      operationId: getAuthorById
      responses:
        "200":
          description: Author data
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/authorType"
      tags:
        - Authors
    put:
      summary: Update an author
      description: Update the author record specified by the given ID
      operationId: updateAuthorById
      requestBody:
        description: Author to update
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/authorType"
        required: true
      responses:
        "200":
          description: Updated author data
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/authorType"
      tags:
        - Authors
    delete:
      summary: Delete an author by ID
      description: Delete the specified author. Does not delete any associated references.
      operationId: deleteAuthorById
      responses:
        default:
          description: Default error sample response
      tags:
        - Authors
  "/author/{id}/withRefCount":
    parameters:
      - name: id
        in: path
        description: ID of author to operate on
        required: true
        schema:
          $ref: "#/components/schemas/idType"
    get:
      summary: Fetch a single author with reference count by ID
      description: Retrieve a single author by ID, including the reference count. Returns author and alias information.
      operationId: getAuthorByIdWithRefCount
      responses:
        "200":
          description: Author data with reference count
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/authorWithRefcountType"
      tags:
        - Authors
  "/author/{id}/withReferences":
    parameters:
      - name: id
        in: path
        description: ID of author to operate on
        required: true
        schema:
          $ref: "#/components/schemas/idType"
    get:
      summary: Fetch a single author with all references by ID
      description: Retrieve a single author by ID, including all the reference structures.
      operationId: getAuthorByIdWithReferences
      responses:
        "200":
          description: Author data with references
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/authorWithReferencesType"
      tags:
        - Authors
  "/magazine":
    post:
      summary: Create a new magazine
      description: Create a new magazine using the data in the request body.
      operationId: createMagazine
      requestBody:
        description: New magazine
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/newMagazineType"
      responses:
        "201":
          description: New magazine created
      tags:
        - Magazines
    get:
      summary: Fetch all magazines
      description: Fetch all magazines as an array. Does not include issue information.
      operationId: getAllMagazines
      responses:
        "200":
          description: All magazines
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/magazineType"
      tags:
        - Magazines
  "/magazine/withIssues":
    get:
      summary: Fetch all magazines with issues
      description: Fetch all magazines as an array. Includes issues information as nested arrays.
      operationId: getAllMagazinesWithIssues
      responses:
        "200":
          description: All magazines with issues
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/magazineWithIssuesType"
      tags:
        - Magazines
  "/magazine/{id}":
    parameters:
      - name: id
        in: path
        description: ID of magazine to operate on
        required: true
        schema:
          $ref: "#/components/schemas/idType"
    get:
      summary: Fetch a single magazine by ID
      description: Retrieve a single magazine by the ID. Does not include issue information.
      operationId: getMagazineById
      responses:
        "200":
          description: Magazine data
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/magazineType"
      tags:
        - Magazines
    put:
      summary: Update a magazine by ID
      description: Update a specific magazine by ID.
      operationId: updateMagazineById
      requestBody:
        description: Magazine to update
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/magazineType"
      responses:
        "200":
          description: Updated magazine
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/magazineType"
      tags:
        - Magazines
    delete:
      summary: Delete a magazine by ID
      description: Delete a specific magazine by ID. Deletes all issues of the magazine and their references.
      operationId: deleteMagazineById
      responses:
        "200":
          description: Magazine deleted
      tags:
        - Magazines
  "/magazine/{id}/withIssues":
    parameters:
      - name: id
        in: path
        description: ID of magazine to operate on
        required: true
        schema:
          $ref: "#/components/schemas/idType"
    get:
      summary: Fetch a single magazine by ID with issue information
      description: Retrieve a single magazine by the ID. Includes issue information as a nested array.
      operationId: getMagazineByIdWithIssues
      responses:
        "200":
          description: Magazine data
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/magazineWithIssuesType"
      tags:
        - Magazines
  "/reference":
    post:
      summary: Create a new reference
      description: Create a new reference using the data in the request body.
      operationId: createReference
      requestBody:
        description: New reference
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/newReferenceType"
      responses:
        "201":
          description: New reference created
      tags:
        - References
    get:
      summary: Fetch all references
      description: Fetch all references as an array. Includes author, record type and magazine information.
      operationId: getAllReferences
      responses:
        "200":
          description: All references
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/referenceType"
      tags:
        - References
  "/reference/{id}":
    parameters:
      - name: id
        in: path
        description: ID of reference to operate on
        required: true
        schema:
          $ref: "#/components/schemas/idType"
    get:
      summary: Fetch a single reference by ID
      description: Retrieve a single reference by the ID. Includes author, record type and magazine information.
      operationId: getReferenceById
      responses:
        "200":
          description: Reference data
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/referenceType"
      tags:
        - References
tags:
  - name: Authors
    description: Operations that are primarily centered around authors
  - name: Magazines
    description: Operations that are primarily centered around magazines
  - name: Issues
    description: Operations that are primarily centered around magazine issues
  - name: References
    description: Operations that are primarily centered around references
  - name: Miscellaneous
    description: Operations that are not associated with any previous group
