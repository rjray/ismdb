openapi: 3.0.3
info:
  title: MyMoDB API
  version: "0.2.0"
servers:
  - url: /api
components:
  parameters:
    offsetParam:
      name: offset
      in: query
      description: Number of query items to skip over
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
    limitParam:
      name: limit
      in: query
      description: Maximum query records to return
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
    orderParam:
      name: order
      in: query
      description: Fields to sort on
      required: false
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true
    whereParam:
      name: where
      in: query
      description: Fields to search on
      required: false
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true
    idParam:
      name: id
      in: path
      description: Entity ID
      required: true
      schema:
        $ref: "#/components/schemas/idType"
    preferredParam:
      name: preferred
      in: query
      description: Preferred language, will be moved to the head of the
        returned list of languages
      required: false
      schema:
        type: string
    countParam:
      name: count
      in: query
      description: A count parameter for operations that limit by count
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
  schemas:
    idType:
      type: integer
      format: int64
      minimum: 1
    countType:
      type: integer
      format: int64
      minimum: 0
    dateTimeType:
      type: string
      format: date-time
    languageType:
      type: string
      maxLength: 50
    authorNameOrAliasType:
      type: string
      maxLength: 60
    magazineNameType:
      type: string
      maxLength: 50
    magazineAliasesType:
      type: string
      maxLength: 100
    magazineNotesType:
      type: string
      maxLength: 1000
    magazineIssueNumberType:
      type: string
      maxLength: 50
    referenceNameType:
      type: string
      maxLength: 255
    referenceTypeType:
      type: string
      maxLength: 75
    referenceIsbnType:
      type: string
      maxLength: 15
    referenceKeywordsType:
      type: string
      maxLength: 2000
    tagNameType:
      type: string
      maxLength: 75
    tagDescriptionType:
      type: string
      maxLength: 255
    tagTypeType:
      type: string
      maxLength: 10
    newAuthorAliasType:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/authorNameOrAliasType"
    authorAliasType:
      allOf:
        - $ref: "#/components/schemas/newAuthorAliasType"
        - type: object
          required:
            - id
            - authorId
          properties:
            id:
              $ref: "#/components/schemas/idType"
            authorId:
              $ref: "#/components/schemas/idType"
    newAuthorType:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/authorNameOrAliasType"
        aliases:
          type: array
          items:
            $ref: "#/components/schemas/newAuthorAliasType"
    selectedAuthorType:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/idType"
        name:
          $ref: "#/components/schemas/authorNameOrAliasType"
    authorType:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/idType"
        name:
          $ref: "#/components/schemas/authorNameOrAliasType"
        createdAt:
          $ref: "#/components/schemas/dateTimeType"
        updatedAt:
          $ref: "#/components/schemas/dateTimeType"
        aliases:
          type: array
          items:
            $ref: "#/components/schemas/authorAliasType"
    authorWithRefCountType:
      allOf:
        - $ref: "#/components/schemas/authorType"
        - type: object
          required:
            - refcount
          properties:
            refcount:
              $ref: "#/components/schemas/countType"
    authorWithRefsAndAliasesType:
      allOf:
        - $ref: "#/components/schemas/authorWithRefCountType"
        - type: object
          required:
            - references
          properties:
            references:
              type: array
              items:
                $ref: "#/components/schemas/referenceType"
            aliases:
              type: array
              items:
                $ref: "#/components/schemas/authorAliasType"
    newMagazineType:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/magazineNameType"
        language:
          $ref: "#/components/schemas/languageType"
        aliases:
          $ref: "#/components/schemas/magazineAliasesType"
        notes:
          $ref: "#/components/schemas/magazineNotesType"
    magazineType:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/idType"
        - $ref: "#/components/schemas/newMagazineType"
    magazineWithIssuesType:
      allOf:
        - $ref: "#/components/schemas/magazineType"
        - type: object
          properties:
            issues:
              type: array
              items:
                $ref: "#/components/schemas/abbreviatedMagazineIssueType"
    magazineWithIssueCountType:
      allOf:
        - $ref: "#/components/schemas/magazineType"
        - type: object
          properties:
            issuecount:
              $ref: "#/components/schemas/countType"
    magazineWithIssuesAndReferencesType:
      allOf:
        - $ref: "#/components/schemas/magazineType"
        - type: object
          properties:
            issues:
              type: array
              items:
                $ref: "#/components/schemas/magazineIssueWithReferencesType"
    abbreviatedMagazineIssueType:
      type: object
      required:
        - id
        - number
      properties:
        id:
          $ref: "#/components/schemas/idType"
        number:
          $ref: "#/components/schemas/magazineIssueNumberType"
    newMagazineIssueType:
      type: object
      required:
        - number
        - magazineId
      properties:
        number:
          $ref: "#/components/schemas/magazineIssueNumberType"
        magazineId:
          $ref: "#/components/schemas/idType"
    updateMagazineIssueType:
      type: object
      required:
        - id
        - number
        - MagazineId
      properties:
        id:
          $ref: "#/components/schemas/idType"
        number:
          $ref: "#/components/schemas/magazineIssueNumberType"
        MagazineId:
          $ref: "#/components/schemas/idType"
    magazineIssueType:
      type: object
      required:
        - id
        - number
        - Magazine
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/idType"
        number:
          $ref: "#/components/schemas/magazineIssueNumberType"
        Magazine:
          $ref: "#/components/schemas/magazineType"
        createdAt:
          $ref: "#/components/schemas/dateTimeType"
        updatedAt:
          $ref: "#/components/schemas/dateTimeType"
    magazineIssueWithReferencesType:
      allOf:
        - $ref: "#/components/schemas/magazineIssueType"
        - type: object
          required:
            - references
          properties:
            references:
              type: array
              items:
                $ref: "#/components/schemas/referenceType"
    recordTypeType:
      type: object
      required:
        - id
        - description
      properties:
        id:
          $ref: "#/components/schemas/idType"
        description:
          type: string
          maxLength: 50
        notes:
          type: string
          maxLength: 255
    newReferenceType:
      type: object
      required:
        - name
        - RecordTypeId
        - tags
      properties:
        name:
          $ref: "#/components/schemas/referenceNameType"
        type:
          $ref: "#/components/schemas/referenceTypeType"
        isbn:
          $ref: "#/components/schemas/referenceIsbnType"
        language:
          $ref: "#/components/schemas/languageType"
        keywords:
          $ref: "#/components/schemas/referenceKeywordsType"
        RecordTypeId:
          $ref: "#/components/schemas/idType"
        MagazineIssueId:
          $ref: "#/components/schemas/idType"
        MagazineIssueNumber:
          $ref: "#/components/schemas/magazineIssueNumberType"
        MagazineId:
          $ref: "#/components/schemas/idType"
        authors:
          type: array
          items:
            $ref: "#/components/schemas/selectedAuthorType"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/tagType"
    updateReferenceType:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/idType"
        - $ref: "#/components/schemas/newReferenceType"
    referenceType:
      type: object
      required:
        - id
        - name
        - RecordType
        - createdAt
        - updatedAt
        - tags
      properties:
        id:
          $ref: "#/components/schemas/idType"
        name:
          $ref: "#/components/schemas/referenceNameType"
        type:
          $ref: "#/components/schemas/referenceTypeType"
        isbn:
          $ref: "#/components/schemas/referenceIsbnType"
        language:
          $ref: "#/components/schemas/languageType"
        keywords:
          $ref: "#/components/schemas/referenceKeywordsType"
        RecordType:
          $ref: "#/components/schemas/recordTypeType"
        MagazineIssue:
          $ref: "#/components/schemas/magazineIssueType"
        Magazine:
          $ref: "#/components/schemas/magazineType"
        authors:
          type: array
          items:
            $ref: "#/components/schemas/authorType"
        createdAt:
          $ref: "#/components/schemas/dateTimeType"
        updatedAt:
          $ref: "#/components/schemas/dateTimeType"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/tagType"
    newTagType:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/tagNameType"
        description:
          $ref: "#/components/schemas/tagDescriptionType"
        type:
          $ref: "#/components/schemas/tagTypeType"
    tagType:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/idType"
        - $ref: "#/components/schemas/newTagType"
    tagWithRefCountType:
      allOf:
        - $ref: "#/components/schemas/tagType"
        - type: object
          required:
            - refcount
          properties:
            refcount:
              $ref: "#/components/schemas/countType"
    tagWithReferencesType:
      allOf:
        - $ref: "#/components/schemas/tagType"
        - type: object
          required:
            - references
          properties:
            references:
              type: array
              items:
                $ref: "#/components/schemas/referenceType"
    errorObjectType:
      type: object
      required:
        - summary
        - description
      properties:
        code:
          $ref: "#/components/schemas/idType"
        summary:
          type: string
          maxLength: 75
        description:
          type: string
        reference:
          type: string
    notificationType:
      type: object
      required:
        - type
        - summary
        - message
      properties:
        type:
          type: string
        summary:
          type: string
          maxLength: 75
        message:
          type: string
    notificationsType:
      type: array
      items:
        $ref: "#/components/schemas/notificationType"
  responses:
    generalErrorResponse:
      description: An error has occurred
      content:
        "application/json":
          schema:
            type: object
            required:
              - error
            properties:
              error:
                $ref: "#/components/schemas/errorObjectType"
              notifications:
                $ref: "#/components/schemas/notificationsType"
    generalError404Response:
      description: Not found
      content:
        "application/json":
          schema:
            type: object
            required:
              - error
            properties:
              error:
                $ref: "#/components/schemas/errorObjectType"
              notifications:
                $ref: "#/components/schemas/notificationsType"
paths:
  "/authors":
    x-exegesis-controller: authorsController
    post:
      summary: Create a new author
      description: Create a new author using the data in the request body.
      operationId: createAuthor
      requestBody:
        description: Author to add
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/newAuthorType"
        required: true
      responses:
        "201":
          description: New author created
          content:
            "application/json":
              schema:
                type: object
                required:
                  - author
                properties:
                  author:
                    $ref: "#/components/schemas/authorType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Authors
    get:
      summary: Fetch all authors
      description: Fetch authors as an array. Includes a count of all authors.
      operationId: getAllAuthors
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: All authors
          content:
            "application/json":
              schema:
                type: object
                required:
                  - count
                  - authors
                properties:
                  count:
                    $ref: "#/components/schemas/countType"
                  authors:
                    type: array
                    items:
                      $ref: "#/components/schemas/authorType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Authors
  "/authors/withRefCount":
    x-exegesis-controller: authorsController
    get:
      summary: Fetch all authors with reference counts
      description: Fetch all authors as an array, with each author record
        including the reference count.
      operationId: getAllAuthorsWithRefCount
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: All authors with reference counts
          content:
            "application/json":
              schema:
                type: object
                required:
                  - count
                  - authors
                properties:
                  count:
                    $ref: "#/components/schemas/countType"
                  authors:
                    type: array
                    items:
                      $ref: "#/components/schemas/authorWithRefCountType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Authors
  "/authors/namesAndAliases":
    x-exegesis-controller: authorsController
    get:
      summary: Fetch a list of author names, including aliases
      description: Fetch all author names as an array, including aliases with a
        pointer to the master name.
      operationId: getAuthorNamesAndAliases
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: All author names and aliases
          content:
            "application/json":
              schema:
                type: object
                required:
                  - authors
                properties:
                  authors:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - name
                      properties:
                        id:
                          $ref: "#/components/schemas/idType"
                        name:
                          $ref: "#/components/schemas/authorNameOrAliasType"
                        aliasOf:
                          $ref: "#/components/schemas/authorNameOrAliasType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Authors
  "/authors/{id}":
    x-exegesis-controller: authorsController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Fetch a single author by ID
      description: Retrieve a single author by ID. Returns author and alias
        information.
      operationId: getAuthorById
      responses:
        "200":
          description: Author data
          content:
            "application/json":
              schema:
                type: object
                required:
                  - author
                properties:
                  author:
                    $ref: "#/components/schemas/authorType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Authors
    put:
      summary: Update an author
      description: Update the author record specified by the given ID.
      operationId: updateAuthorById
      requestBody:
        description: Author to update
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/authorType"
        required: true
      responses:
        "200":
          description: Updated author data
          content:
            "application/json":
              schema:
                type: object
                required:
                  - author
                properties:
                  author:
                    $ref: "#/components/schemas/authorType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Authors
    delete:
      summary: Delete an author by ID
      description: Delete the specified author. Removes the author from
        associated reference records. Does not delete any reference records.
      operationId: deleteAuthorById
      responses:
        "200":
          description: Author deleted
          content:
            "application/json":
              schema:
                type: object
                properties:
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Authors
  "/authors/{id}/withRefCount":
    x-exegesis-controller: authorsController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Fetch a single author with reference count by ID
      description: Retrieve a single author by ID, including the reference
        count. Returns author and alias information.
      operationId: getAuthorByIdWithRefCount
      responses:
        "200":
          description: Author data with reference count
          content:
            "application/json":
              schema:
                type: object
                required:
                  - author
                properties:
                  author:
                    $ref: "#/components/schemas/authorWithRefCountType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Authors
  "/authors/{id}/withRefsAndAliases":
    x-exegesis-controller: authorsController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Fetch a single author by ID with all references and aliases
      description: Retrieve a single author by ID, including all the reference
        structures and any author aliases.
      operationId: getAuthorByIdWithReferences
      responses:
        "200":
          description: Author data with references and aliases
          content:
            "application/json":
              schema:
                type: object
                required:
                  - author
                properties:
                  author:
                    $ref: "#/components/schemas/authorWithRefsAndAliasesType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Authors
  "/magazines":
    x-exegesis-controller: magazinesController
    post:
      summary: Create a new magazine
      description: Create a new magazine using the data in the request body.
      operationId: createMagazine
      requestBody:
        description: New magazine
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/newMagazineType"
      responses:
        "201":
          description: New magazine created
          content:
            "application/json":
              schema:
                type: object
                required:
                  - magazine
                properties:
                  magazine:
                    $ref: "#/components/schemas/newMagazineType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Magazines
    get:
      summary: Fetch all magazines
      description: Fetch all magazines as an array. Does not include issue
        information.
      operationId: getAllMagazines
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: All magazines
          content:
            "application/json":
              schema:
                type: object
                required:
                  - count
                  - magazines
                properties:
                  count:
                    $ref: "#/components/schemas/countType"
                  magazines:
                    type: array
                    items:
                      $ref: "#/components/schemas/magazineWithIssueCountType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Magazines
  "/magazines/withIssues":
    x-exegesis-controller: magazinesController
    get:
      summary: Fetch all magazines with issues
      description: Fetch all magazines as an array. Includes issues information
        as nested arrays.
      operationId: getAllMagazinesWithIssues
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: All magazines with issues
          content:
            "application/json":
              schema:
                type: object
                required:
                  - count
                  - magazines
                properties:
                  count:
                    $ref: "#/components/schemas/countType"
                  magazines:
                    type: array
                    items:
                      $ref: "#/components/schemas/magazineWithIssuesType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Magazines
  "/magazines/getMostRecentlyUpdated":
    x-exegesis-controller: magazinesController
    get:
      summary: Fetch the most-recently-added-to magazines
      description: Fetch a number of magazines that have been most-recently
        added to.
      operationId: getMostRecentUpdatedMagazines
      parameters:
        - $ref: "#/components/parameters/countParam"
      responses:
        "200":
          description: Most-recently-added-to magazines in descending order
          content:
            "application/json":
              schema:
                type: object
                required:
                  - magazines
                properties:
                  magazines:
                    type: array
                    items:
                      $ref: "#/components/schemas/magazineType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Magazines
  "/magazines/{id}":
    x-exegesis-controller: magazinesController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Fetch a single magazine by ID
      description: Retrieve a single magazine by the ID. Does not include issue
        information.
      operationId: getMagazineById
      responses:
        "200":
          description: Magazine data
          content:
            "application/json":
              schema:
                type: object
                required:
                  - magazine
                properties:
                  magazine:
                    $ref: "#/components/schemas/magazineType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Magazines
    put:
      summary: Update a magazine by ID
      description: Update a specific magazine by ID.
      operationId: updateMagazineById
      requestBody:
        description: Magazine to update
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/magazineType"
      responses:
        "200":
          description: Updated magazine
          content:
            "application/json":
              schema:
                type: object
                required:
                  - magazine
                properties:
                  magazine:
                    $ref: "#/components/schemas/magazineType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Magazines
    delete:
      summary: Delete a magazine by ID
      description: Delete a specific magazine by ID. Deletes all issues of the
        magazine and their references.
      operationId: deleteMagazineById
      responses:
        "200":
          description: Magazine deleted
          content:
            "application/json":
              schema:
                type: object
                properties:
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Magazines
  "/magazines/{id}/withIssues":
    x-exegesis-controller: magazinesController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Fetch a single magazine by ID with issue information
      description: Retrieve a single magazine by the ID. Includes issue
        information as a nested array. Issues include all reference information
        as well.
      operationId: getMagazineByIdWithIssues
      responses:
        "200":
          description: Magazine data
          content:
            "application/json":
              schema:
                type: object
                required:
                  - magazine
                properties:
                  magazine:
                    $ref: "#/components/schemas/magazineWithIssuesAndReferencesType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Magazines
  "/issues":
    x-exegesis-controller: issuesController
    post:
      summary: Create a new magazine issue
      description: Create a new issue for the specified magazine.
      operationId: createMagazineIssue
      requestBody:
        description: New issue
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/newMagazineIssueType"
      responses:
        "201":
          description: New issue created
          content:
            "application/json":
              schema:
                type: object
                required:
                  - magazineissue
                properties:
                  magazineissue:
                    $ref: "#/components/schemas/magazineIssueType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Issues
  "/issues/{id}":
    x-exegesis-controller: issuesController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Get a full magazine issue
      description: Get a full magazine issue with magazine and reference
        information.
      operationId: getMagazineIssueById
      responses:
        "200":
          description: Issue data
          content:
            "application/json":
              schema:
                type: object
                required:
                  - issue
                properties:
                  issue:
                    $ref: "#/components/schemas/magazineIssueWithReferencesType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Issues
    put:
      summary: Update a magazine issue
      description: Update a magazine issue. Does not affect any associated
        references.
      operationId: updateMagazineIssueById
      requestBody:
        description: Magazine issue to update
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/updateMagazineIssueType"
      responses:
        "200":
          description: Updated magazine issue
          content:
            "application/json":
              schema:
                type: object
                required:
                  - issue
                properties:
                  issue:
                    $ref: "#/components/schemas/magazineIssueType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Issues
    delete:
      summary: Delete a magazine issue
      description: Delete a magazine issues. Deletes all references associated
        with it.
      operationId: deleteMagazineIssueById
      responses:
        "200":
          description: Magazine issue deleted
          content:
            "application/json":
              schema:
                type: object
                properties:
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Issues
  "/references":
    x-exegesis-controller: referencesController
    post:
      summary: Create a new reference
      description: Create a new reference using the data in the request body.
      operationId: createReference
      requestBody:
        description: New reference
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/newReferenceType"
      responses:
        "201":
          description: New reference created
          content:
            "application/json":
              schema:
                type: object
                required:
                  - reference
                properties:
                  reference:
                    $ref: "#/components/schemas/referenceType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - References
    get:
      summary: Fetch all references
      description: Fetch all references as an array. Includes author, record
        type and magazine information.
      operationId: getAllReferences
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: All references
          content:
            "application/json":
              schema:
                type: object
                required:
                  - count
                  - references
                properties:
                  count:
                    $ref: "#/components/schemas/countType"
                  references:
                    type: array
                    items:
                      $ref: "#/components/schemas/referenceType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - References
  "/references/{id}":
    x-exegesis-controller: referencesController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Fetch a single reference by ID
      description: Retrieve a single reference by the ID. Includes author,
        record type and magazine information.
      operationId: getReferenceById
      responses:
        "200":
          description: Reference data
          content:
            "application/json":
              schema:
                type: object
                required:
                  - reference
                properties:
                  reference:
                    $ref: "#/components/schemas/referenceType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - References
    put:
      summary: Update a reference
      description: Update a reference. May result in the creation of new
        authors and/or a new magazine issue record.
      operationId: updateReferenceById
      requestBody:
        description: Reference to update
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/updateReferenceType"
      responses:
        "200":
          description: Updated reference
          content:
            "application/json":
              schema:
                type: object
                required:
                  - reference
                properties:
                  reference:
                    $ref: "#/components/schemas/referenceType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - References
    delete:
      summary: Delete a single reference by ID
      description: Delete a single reference by the ID. Removes any author
        associations, but does not affect any other related records.
      operationId: deleteReferenceById
      responses:
        "200":
          description: Reference deleted
          content:
            "application/json":
              schema:
                type: object
                properties:
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - References
  "/tags":
    x-exegesis-controller: tagsController
    post:
      summary: Create a new tag
      description: Create a new tag using the data in the request body.
      operationId: createTag
      requestBody:
        description: Tag to add
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/newTagType"
        required: true
      responses:
        "201":
          description: New tag created
          content:
            "application/json":
              schema:
                type: object
                required:
                  - tag
                properties:
                  tag:
                    $ref: "#/components/schemas/tagType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Tags
    get:
      summary: Fetch all tags
      description: Fetch tags as an array. Includes a count of all tags.
      operationId: getAllTags
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: All tags
          content:
            "application/json":
              schema:
                type: object
                required:
                  - count
                  - tags
                properties:
                  count:
                    $ref: "#/components/schemas/countType"
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/tagType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Tags
  "/tags/withRefCount":
    x-exegesis-controller: tagsController
    get:
      summary: Fetch all tags with count of tagged references
      description: Fetch tags as an array. Each tag struture includes an extra
        field that counts the number of references tagged by the tag.
      operationId: getAllTagsWithRefCount
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: All tags with reference counts
          content:
            "application/json":
              schema:
                type: object
                required:
                  - count
                  - tags
                properties:
                  count:
                    $ref: "#/components/schemas/countType"
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/tagWithRefCountType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Tags
  "/tags/{id}":
    x-exegesis-controller: tagsController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Fetch a single tag by ID
      description: Retrieve a single tag by the ID. Includes full tag
        information.
      operationId: getTagById
      responses:
        "200":
          description: Tag data
          content:
            "application/json":
              schema:
                type: object
                required:
                  - tag
                properties:
                  tag:
                    $ref: "#/components/schemas/tagType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Tags
    put:
      summary: Update a tag
      description: Update a tag with the information in the request body.
      operationId: updateTagById
      requestBody:
        description: Tag to update
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/tagType"
        required: true
      responses:
        "200":
          description: Updated tag data
          content:
            "application/json":
              schema:
                type: object
                required:
                  - tag
                properties:
                  tag:
                    $ref: "#/components/schemas/tagType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Tags
    delete:
      summary: Delete a tag by ID
      description: Delete the specified tag. Removes all relational links
        between the tag and any references.
      operationId: deleteTagById
      responses:
        "200":
          description: Tag deleted
          content:
            "application/json":
              schema:
                type: object
                properties:
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Tags
  "/tags/{id}/withRefCount":
    x-exegesis-controller: tagsController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Fetch a single tag by ID with a count of tagged references
      description: Retrieve a single tag by ID, including the count of the
        references tagged with the given tag.
      operationId: getTagByIdWithRefCount
      responses:
        "200":
          description: Tag data with reference count
          content:
            "application/json":
              schema:
                type: object
                required:
                  - tag
                properties:
                  tag:
                    $ref: "#/components/schemas/tagWithRefCountType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Tags
  "/tags/{id}/withReferences":
    x-exegesis-controller: tagsController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Fetch a single tag by ID with all tagged references
      description: Retrieve a single tag by ID, including all the tagged
        references as an array.
      operationId: getTagByIdWithReferences
      responses:
        "200":
          description: Tag data with references
          content:
            "application/json":
              schema:
                type: object
                required:
                  - tag
                properties:
                  tag:
                    $ref: "#/components/schemas/tagWithReferencesType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Tags
  "/combo/referenceeditdata":
    x-exegesis-controller: comboController
    get:
      summary: Retrieve all data needed for the reference creation form
      description: Retrieve all the data needed for the form used for creating
        new references. Data includes all languages, all record types, author
        names and aliases, and magazine names with their respective issue
        numbers.
      operationId: fetchCreateReferenceData
      parameters:
        - $ref: "#/components/parameters/preferredParam"
      responses:
        "200":
          description: Reference-creation data bundle
          content:
            "application/json":
              schema:
                type: object
                required:
                  - languages
                  - recordTypes
                  - authors
                  - magazines
                properties:
                  languages:
                    type: array
                    items:
                      $ref: "#/components/schemas/languageType"
                  recordTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/recordTypeType"
                  authors:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - name
                      properties:
                        id:
                          $ref: "#/components/schemas/idType"
                        name:
                          $ref: "#/components/schemas/authorNameOrAliasType"
                        aliasOf:
                          $ref: "#/components/schemas/authorNameOrAliasType"
                  magazines:
                    type: array
                    items:
                      $ref: "#/components/schemas/magazineWithIssuesType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Combination
  "/combo/referenceeditdata/{id}":
    x-exegesis-controller: comboController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Retrieve all data needed for the reference editing form
      description: Retrieve all the data needed for the form used for editing
        existing references. Data includes all languages, all record types,
        author names and aliases, magazine names with their respective issue
        numbers, and the existing reference record itself.
      operationId: fetchEditReferenceData
      parameters:
        - $ref: "#/components/parameters/preferredParam"
      responses:
        "200":
          description: Reference-editing data bundle
          content:
            "application/json":
              schema:
                type: object
                required:
                  - languages
                  - recordTypes
                  - authors
                  - magazines
                  - reference
                properties:
                  languages:
                    type: array
                    items:
                      $ref: "#/components/schemas/languageType"
                  recordTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/recordTypeType"
                  authors:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - name
                      properties:
                        id:
                          $ref: "#/components/schemas/idType"
                        name:
                          $ref: "#/components/schemas/authorNameOrAliasType"
                        aliasOf:
                          $ref: "#/components/schemas/authorNameOrAliasType"
                  magazines:
                    type: array
                    items:
                      $ref: "#/components/schemas/magazineWithIssuesType"
                  reference:
                    $ref: "#/components/schemas/referenceType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Combination
  "/combo/magazineeditdata":
    x-exegesis-controller: comboController
    get:
      summary: Retrieve all data needed for the magazine creation form
      description: Retrieve all the data needed for the form used for creating
        magazines. Data includes (for now) just languages.
      operationId: fetchCreateMagazineData
      parameters:
        - $ref: "#/components/parameters/preferredParam"
      responses:
        "200":
          description: Reference-editing data bundle
          content:
            "application/json":
              schema:
                type: object
                required:
                  - languages
                  - magazine
                properties:
                  languages:
                    type: array
                    items:
                      $ref: "#/components/schemas/languageType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Combination
  "/combo/magazineeditdata/{id}":
    x-exegesis-controller: comboController
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Retrieve all data needed for the magazine editing form
      description: Retrieve all the data needed for the form used for editing
        existing magazines. Data includes all languages, and the existing
        magazine record itself.
      operationId: fetchEditMagazineData
      parameters:
        - $ref: "#/components/parameters/preferredParam"
      responses:
        "200":
          description: Reference-editing data bundle
          content:
            "application/json":
              schema:
                type: object
                required:
                  - languages
                  - magazine
                properties:
                  languages:
                    type: array
                    items:
                      $ref: "#/components/schemas/languageType"
                  magazine:
                    $ref: "#/components/schemas/magazineType"
                  notifications:
                    $ref: "#/components/schemas/notificationsType"
        "404":
          $ref: "#/components/responses/generalError404Response"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Combination
  "/misc/recordtypes":
    x-exegesis-controller: miscController
    get:
      summary: Fetch all record types as an array
      description: Retrieve all record types as an array of objects.
      operationId: getAllRecordTypes
      responses:
        "200":
          description: All reference types
          content:
            "application/json":
              schema:
                type: object
                required:
                  - recordTypes
                properties:
                  recordTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/recordTypeType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Miscellaneous
  "/misc/languages":
    x-exegesis-controller: miscController
    get:
      summary: Fetch all language strings as an array
      description: Fetch all language strings currently in use from the
        database as an array of strings.
      operationId: getAllLanguages
      parameters:
        - $ref: "#/components/parameters/preferredParam"
      responses:
        "200":
          description: All languages
          content:
            "application/json":
              schema:
                type: object
                required:
                  - languages
                properties:
                  languages:
                    type: array
                    items:
                      $ref: "#/components/schemas/languageType"
        default:
          $ref: "#/components/responses/generalErrorResponse"
      tags:
        - Miscellaneous
tags:
  - name: Authors
    description: Operations that are primarily centered around authors
  - name: Magazines
    description: Operations that are primarily centered around magazines
  - name: Issues
    description: Operations that are primarily centered around magazine issues
  - name: References
    description: Operations that are primarily centered around references
  - name: Tags
    description: Operations that are primarily centered around tags
  - name: Combination
    description: Operations that return more than one type of data
  - name: Miscellaneous
    description: Operations that are not associated with any previous group
