{
  "components": {
    "parameters": {
      "limitParam": {
        "description": "Maximum query records to return",
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "format": "int32",
          "type": "integer"
        }
      },
      "skipParam": {
        "description": "Number of query items to skip",
        "in": "query",
        "name": "skip",
        "required": false,
        "schema": {
          "format": "int32",
          "type": "integer"
        }
      },
      "sortByParam": {
        "description": "Field to sort on",
        "in": "query",
        "name": "sortBy",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "sortDirParam": {
        "description": "Direction to sort in",
        "in": "query",
        "name": "sortDir",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "generalError404Response": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "$ref": "#/components/schemas/errorObjectType"
                },
                "notifications": {
                  "$ref": "#/components/schemas/notificationsType"
                }
              },
              "required": [
                "error"
              ],
              "type": "object"
            }
          }
        },
        "description": "Not found"
      },
      "generalErrorResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "$ref": "#/components/schemas/errorObjectType"
                },
                "notifications": {
                  "$ref": "#/components/schemas/notificationsType"
                }
              },
              "required": [
                "error"
              ],
              "type": "object"
            }
          }
        },
        "description": "An error has occurred"
      }
    },
    "schemas": {
      "abbreviatedMagazineIssueType": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/idType"
          },
          "number": {
            "$ref": "#/components/schemas/magazineIssueNumberType"
          }
        },
        "required": [
          "id",
          "number"
        ],
        "type": "object"
      },
      "authorAliasType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/newAuthorAliasType"
          },
          {
            "properties": {
              "authorId": {
                "$ref": "#/components/schemas/idType"
              },
              "id": {
                "$ref": "#/components/schemas/idType"
              }
            },
            "required": [
              "id",
              "authorId"
            ],
            "type": "object"
          }
        ]
      },
      "authorNameOrAliasType": {
        "maxLength": 60,
        "type": "string"
      },
      "authorType": {
        "properties": {
          "aliases": {
            "items": {
              "$ref": "#/components/schemas/authorAliasType"
            },
            "type": "array"
          },
          "createdAt": {
            "$ref": "#/components/schemas/dateTimeType"
          },
          "id": {
            "$ref": "#/components/schemas/idType"
          },
          "name": {
            "$ref": "#/components/schemas/authorNameOrAliasType"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/dateTimeType"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "authorWithRefcountType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/authorType"
          },
          {
            "properties": {
              "refcount": {
                "type": "integer"
              }
            },
            "required": [
              "refcount"
            ],
            "type": "object"
          }
        ]
      },
      "authorWithReferencesType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/authorWithRefcountType"
          },
          {
            "properties": {
              "references": {
                "items": {
                  "$ref": "#/components/schemas/referenceType"
                },
                "type": "array"
              }
            },
            "required": [
              "references"
            ],
            "type": "object"
          }
        ]
      },
      "dateTimeType": {
        "format": "date-time",
        "type": "string"
      },
      "errorObjectType": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/idType"
          },
          "description": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "summary": {
            "maxLength": 75,
            "type": "string"
          }
        },
        "required": [
          "summary",
          "description"
        ],
        "type": "object"
      },
      "idType": {
        "format": "int64",
        "minimum": 0,
        "type": "integer"
      },
      "languageType": {
        "maxLength": 50,
        "type": "string"
      },
      "magazineAliasesType": {
        "maxLength": 100,
        "type": "string"
      },
      "magazineIssueNumberType": {
        "maxLength": 50,
        "type": "string"
      },
      "magazineIssueType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abbreviatedMagazineIssueType"
          },
          {
            "properties": {
              "Magazine": {
                "$ref": "#/components/schemas/magazineType"
              }
            },
            "required": [
              "Magazine"
            ],
            "type": "object"
          }
        ]
      },
      "magazineIssueWithReferencesType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/magazineIssueType"
          },
          {
            "properties": {
              "references": {
                "items": {
                  "$ref": "#/components/schemas/referenceType"
                },
                "type": "array"
              }
            },
            "required": [
              "references"
            ],
            "type": "object"
          }
        ]
      },
      "magazineNameType": {
        "maxLength": 50,
        "type": "string"
      },
      "magazineNotesType": {
        "maxLength": 1000,
        "type": "string"
      },
      "magazineType": {
        "allOf": [
          {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/idType"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/newMagazineType"
          }
        ]
      },
      "magazineWithIssuesType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/magazineType"
          },
          {
            "properties": {
              "issues": {
                "items": {
                  "$ref": "#/components/schemas/abbreviatedMagazineIssueType"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "newAuthorAliasType": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/authorNameOrAliasType"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "newAuthorType": {
        "properties": {
          "aliases": {
            "items": {
              "$ref": "#/components/schemas/newAuthorAliasType"
            },
            "type": "array"
          },
          "name": {
            "$ref": "#/components/schemas/authorNameOrAliasType"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "newMagazineIssueType": {
        "properties": {
          "magazineId": {
            "$ref": "#/components/schemas/idType"
          },
          "number": {
            "$ref": "#/components/schemas/magazineIssueNumberType"
          }
        },
        "required": [
          "number",
          "magazineId"
        ],
        "type": "object"
      },
      "newMagazineType": {
        "properties": {
          "aliases": {
            "$ref": "#/components/schemas/magazineAliasesType"
          },
          "language": {
            "$ref": "#/components/schemas/languageType"
          },
          "name": {
            "$ref": "#/components/schemas/magazineNameType"
          },
          "notes": {
            "$ref": "#/components/schemas/magazineNotesType"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "newReferenceType": {
        "properties": {
          "MagazineId": {
            "$ref": "#/components/schemas/idType"
          },
          "MagazineIssueId": {
            "$ref": "#/components/schemas/idType"
          },
          "MagazineIssueNumber": {
            "$ref": "#/components/schemas/magazineIssueNumberType"
          },
          "RecordTypeId": {
            "$ref": "#/components/schemas/idType"
          },
          "authors": {
            "items": {
              "$ref": "#/components/schemas/selectedAuthorType"
            },
            "type": "array"
          },
          "isbn": {
            "$ref": "#/components/schemas/referenceIsbnType"
          },
          "keywords": {
            "$ref": "#/components/schemas/referenceKeywordsType"
          },
          "language": {
            "$ref": "#/components/schemas/languageType"
          },
          "name": {
            "$ref": "#/components/schemas/referenceNameType"
          },
          "type": {
            "$ref": "#/components/schemas/referenceTypeType"
          }
        },
        "required": [
          "name",
          "RecordTypeId",
          "keywords"
        ],
        "type": "object"
      },
      "notificationType": {
        "properties": {
          "message": {
            "type": "string"
          },
          "summary": {
            "maxLength": 75,
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "summary",
          "message"
        ],
        "type": "object"
      },
      "notificationsType": {
        "items": {
          "$ref": "#/components/schemas/notificationType"
        },
        "type": "array"
      },
      "recordTypeType": {
        "properties": {
          "description": {
            "maxLength": 50,
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/idType"
          },
          "notes": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "id",
          "description"
        ],
        "type": "object"
      },
      "referenceIsbnType": {
        "maxLength": 15,
        "type": "string"
      },
      "referenceKeywordsType": {
        "maxLength": 2000,
        "type": "string"
      },
      "referenceNameType": {
        "maxLength": 255,
        "type": "string"
      },
      "referenceType": {
        "properties": {
          "Magazine": {
            "$ref": "#/components/schemas/magazineType"
          },
          "MagazineIssue": {
            "$ref": "#/components/schemas/magazineIssueType"
          },
          "RecordType": {
            "$ref": "#/components/schemas/recordTypeType"
          },
          "authors": {
            "items": {
              "$ref": "#/components/schemas/authorType"
            },
            "type": "array"
          },
          "createdAt": {
            "$ref": "#/components/schemas/dateTimeType"
          },
          "id": {
            "$ref": "#/components/schemas/idType"
          },
          "isbn": {
            "$ref": "#/components/schemas/referenceIsbnType"
          },
          "keywords": {
            "$ref": "#/components/schemas/referenceKeywordsType"
          },
          "language": {
            "$ref": "#/components/schemas/languageType"
          },
          "name": {
            "$ref": "#/components/schemas/referenceNameType"
          },
          "type": {
            "$ref": "#/components/schemas/referenceTypeType"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/dateTimeType"
          }
        },
        "required": [
          "id",
          "name",
          "RecordType",
          "createdAt",
          "updatedAt"
        ],
        "type": "object"
      },
      "referenceTypeType": {
        "maxLength": 75,
        "type": "string"
      },
      "selectedAuthorType": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/idType"
          },
          "name": {
            "$ref": "#/components/schemas/authorNameOrAliasType"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "updateMagazineIssueType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abbreviatedMagazineIssueType"
          },
          {
            "properties": {
              "MagazineId": {
                "$ref": "#/components/schemas/idType"
              }
            },
            "required": [
              "MagazineId"
            ],
            "type": "object"
          }
        ]
      },
      "updateReferenceType": {
        "allOf": [
          {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/idType"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/newReferenceType"
          }
        ]
      }
    }
  },
  "info": {
    "title": "MyMoDB API",
    "version": "0.1"
  },
  "openapi": "3.0.3",
  "paths": {
    "/author": {
      "get": {
        "description": "Fetch all authors as an array",
        "operationId": "getAllAuthors",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "authors": {
                      "items": {
                        "$ref": "#/components/schemas/authorType"
                      },
                      "type": "array"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "authors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "All authors"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch all authors",
        "tags": [
          "Authors"
        ]
      },
      "post": {
        "description": "Create a new author using the data in the request body.",
        "operationId": "createAuthor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newAuthorType"
              }
            }
          },
          "description": "Author to add",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "author": {
                      "$ref": "#/components/schemas/authorType"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "author"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "New author created"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Create a new author",
        "tags": [
          "Authors"
        ]
      }
    },
    "/author/withRefCount": {
      "get": {
        "description": "Fetch all authors as an array, with each author record including the reference count",
        "operationId": "getAllAuthorsWithRefCount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "authors": {
                      "items": {
                        "$ref": "#/components/schemas/authorWithRefcountType"
                      },
                      "type": "array"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "authors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "All authors with reference counts"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch all authors with reference counts",
        "tags": [
          "Authors"
        ]
      }
    },
    "/author/{id}": {
      "delete": {
        "description": "Delete the specified author. Removes the author from associated reference records. Does not delete any reference records.",
        "operationId": "deleteAuthorById",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Author deleted"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Delete an author by ID",
        "tags": [
          "Authors"
        ]
      },
      "get": {
        "description": "Retrieve a single author by ID. Returns author and alias information.",
        "operationId": "getAuthorById",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "author": {
                      "$ref": "#/components/schemas/authorType"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "author"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Author data"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch a single author by ID",
        "tags": [
          "Authors"
        ]
      },
      "parameters": [
        {
          "description": "ID of author to operate on",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/idType"
          }
        }
      ],
      "put": {
        "description": "Update the author record specified by the given ID",
        "operationId": "updateAuthorById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorType"
              }
            }
          },
          "description": "Author to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "author": {
                      "$ref": "#/components/schemas/authorType"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "author"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Updated author data"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Update an author",
        "tags": [
          "Authors"
        ]
      }
    },
    "/author/{id}/withRefCount": {
      "get": {
        "description": "Retrieve a single author by ID, including the reference count. Returns author and alias information.",
        "operationId": "getAuthorByIdWithRefCount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "author": {
                      "$ref": "#/components/schemas/authorWithRefcountType"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "author"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Author data with reference count"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch a single author with reference count by ID",
        "tags": [
          "Authors"
        ]
      },
      "parameters": [
        {
          "description": "ID of author to operate on",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/idType"
          }
        }
      ]
    },
    "/author/{id}/withReferences": {
      "get": {
        "description": "Retrieve a single author by ID, including all the reference structures.",
        "operationId": "getAuthorByIdWithReferences",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "author": {
                      "$ref": "#/components/schemas/authorWithReferencesType"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "author"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Author data with references"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch a single author with all references by ID",
        "tags": [
          "Authors"
        ]
      },
      "parameters": [
        {
          "description": "ID of author to operate on",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/idType"
          }
        }
      ]
    },
    "/issue": {
      "post": {
        "description": "Create a new issue for the specified magazine.",
        "operationId": "createIssue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "issue": {
                    "$ref": "#/components/schemas/newMagazineIssueType"
                  },
                  "notifications": {
                    "$ref": "#/components/schemas/notificationsType"
                  }
                },
                "required": [
                  "issue"
                ],
                "type": "object"
              }
            }
          },
          "description": "New issue"
        },
        "responses": {
          "201": {
            "description": "New issue created"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Create a new magazine issue",
        "tags": [
          "Issues"
        ]
      }
    },
    "/issue/{id}": {
      "delete": {
        "description": "Delete a magazine issues. Deletes all references associated with it.",
        "operationId": "deleteIssueById",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Magazine issue deleted"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Delete a magazine issue",
        "tags": [
          "Issues"
        ]
      },
      "get": {
        "description": "Get a full magazine issue with magazine and reference information.",
        "operationId": "getIssueById",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "issue": {
                      "$ref": "#/components/schemas/magazineIssueWithReferencesType"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "issue"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Issue data"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Get a full magazine issue",
        "tags": [
          "Issues"
        ]
      },
      "parameters": [
        {
          "description": "ID of magazine issue to operate on",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/idType"
          }
        }
      ],
      "put": {
        "description": "Update a magazine issue. Does not affect any associated references.",
        "operationId": "updateIssueById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateMagazineIssueType"
              }
            }
          },
          "description": "Magazine issue to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "issue": {
                      "$ref": "#/components/schemas/magazineIssueType"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "issue"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Updated magazine issue"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Update a magazine issue",
        "tags": [
          "Issues"
        ]
      }
    },
    "/magazine": {
      "get": {
        "description": "Fetch all magazines as an array. Does not include issue information.",
        "operationId": "getAllMagazines",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "magazines": {
                      "items": {
                        "$ref": "#/components/schemas/magazineType"
                      },
                      "type": "array"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "magazines"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "All magazines"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch all magazines",
        "tags": [
          "Magazines"
        ]
      },
      "post": {
        "description": "Create a new magazine using the data in the request body.",
        "operationId": "createMagazine",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newMagazineType"
              }
            }
          },
          "description": "New magazine"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "magazine": {
                      "$ref": "#/components/schemas/newMagazineType"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "magazine"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "New magazine created"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Create a new magazine",
        "tags": [
          "Magazines"
        ]
      }
    },
    "/magazine/withIssues": {
      "get": {
        "description": "Fetch all magazines as an array. Includes issues information as nested arrays.",
        "operationId": "getAllMagazinesWithIssues",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "magazines": {
                      "items": {
                        "$ref": "#/components/schemas/magazineType"
                      },
                      "type": "array"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "magazines"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "All magazines with issues"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch all magazines with issues",
        "tags": [
          "Magazines"
        ]
      }
    },
    "/magazine/{id}": {
      "delete": {
        "description": "Delete a specific magazine by ID. Deletes all issues of the magazine and their references.",
        "operationId": "deleteMagazineById",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Magazine deleted"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Delete a magazine by ID",
        "tags": [
          "Magazines"
        ]
      },
      "get": {
        "description": "Retrieve a single magazine by the ID. Does not include issue information.",
        "operationId": "getMagazineById",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "magazine": {
                      "$ref": "#/components/schemas/magazineType"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "magazine"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Magazine data"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch a single magazine by ID",
        "tags": [
          "Magazines"
        ]
      },
      "parameters": [
        {
          "description": "ID of magazine to operate on",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/idType"
          }
        }
      ],
      "put": {
        "description": "Update a specific magazine by ID.",
        "operationId": "updateMagazineById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/magazineType"
              }
            }
          },
          "description": "Magazine to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "magazine": {
                      "$ref": "#/components/schemas/magazineType"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "magazine"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Updated magazine"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Update a magazine by ID",
        "tags": [
          "Magazines"
        ]
      }
    },
    "/magazine/{id}/withIssues": {
      "get": {
        "description": "Retrieve a single magazine by the ID. Includes issue information as a nested array.",
        "operationId": "getMagazineByIdWithIssues",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "magazine": {
                      "$ref": "#/components/schemas/magazineWithIssuesType"
                    },
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "required": [
                    "magazine"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Magazine data"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch a single magazine by ID with issue information",
        "tags": [
          "Magazines"
        ]
      },
      "parameters": [
        {
          "description": "ID of magazine to operate on",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/idType"
          }
        }
      ]
    },
    "/misc/languages": {
      "get": {
        "description": "Fetch all language strings currently in use from the database.",
        "operationId": "getAllLanguages",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "languages": {
                      "items": {
                        "$ref": "#/components/schemas/languageType"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "languages"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "All languages"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch all language strings",
        "tags": [
          "Miscellaneous"
        ]
      }
    },
    "/misc/recordtypes": {
      "get": {
        "description": "Retrieve all record types as a list of objects.",
        "operationId": "getAllRecordTypes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "recordTypes": {
                      "items": {
                        "$ref": "#/components/schemas/recordTypeType"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "recordTypes"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "All reference types"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch all record types as a list",
        "tags": [
          "Miscellaneous"
        ]
      }
    },
    "/reference": {
      "get": {
        "description": "Fetch all references as an array. Includes author, record type and magazine information.",
        "operationId": "getAllReferences",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    },
                    "references": {
                      "items": {
                        "$ref": "#/components/schemas/referenceType"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "references"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "All references"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch all references",
        "tags": [
          "References"
        ]
      },
      "post": {
        "description": "Create a new reference using the data in the request body.",
        "operationId": "createReference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newReferenceType"
              }
            }
          },
          "description": "New reference"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    },
                    "reference": {
                      "$ref": "#/components/schemas/referenceType"
                    }
                  },
                  "required": [
                    "reference"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "New reference created"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Create a new reference",
        "tags": [
          "References"
        ]
      }
    },
    "/reference/{id}": {
      "delete": {
        "description": "Delete a single reference by the ID. Does not affect any related records.",
        "operationId": "deleteReferenceById",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Reference deleted"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Delete a single reference by ID",
        "tags": [
          "References"
        ]
      },
      "get": {
        "description": "Retrieve a single reference by the ID. Includes author, record type and magazine information.",
        "operationId": "getReferenceById",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    },
                    "reference": {
                      "$ref": "#/components/schemas/referenceType"
                    }
                  },
                  "required": [
                    "reference"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Reference data"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Fetch a single reference by ID",
        "tags": [
          "References"
        ]
      },
      "parameters": [
        {
          "description": "ID of reference to operate on",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/idType"
          }
        }
      ],
      "put": {
        "description": "Update a reference. May result in the creation of new authors and/or a new magazine issue record.",
        "operationId": "updateReferenceById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateReferenceType"
              }
            }
          },
          "description": "Reference to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "notifications": {
                      "$ref": "#/components/schemas/notificationsType"
                    },
                    "reference": {
                      "$ref": "#/components/schemas/referenceType"
                    }
                  },
                  "required": [
                    "reference"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Updated reference"
          },
          "404": {
            "$ref": "#/components/responses/generalError404Response"
          },
          "default": {
            "$ref": "#/components/responses/generalErrorResponse"
          }
        },
        "summary": "Update a reference",
        "tags": [
          "References"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "tags": [
    {
      "description": "Operations that are primarily centered around authors",
      "name": "Authors"
    },
    {
      "description": "Operations that are primarily centered around magazines",
      "name": "Magazines"
    },
    {
      "description": "Operations that are primarily centered around magazine issues",
      "name": "Issues"
    },
    {
      "description": "Operations that are primarily centered around references",
      "name": "References"
    },
    {
      "description": "Operations that are not associated with any previous group",
      "name": "Miscellaneous"
    }
  ]
}
