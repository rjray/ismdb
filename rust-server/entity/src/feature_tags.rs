//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize,
)]
#[sea_orm(table_name = "feature_tags")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Related<super::magazine_features::Entity> for Entity {
    fn to() -> RelationDef {
        super::feature_tags_magazine_features::Relation::MagazineFeatures.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::feature_tags_magazine_features::Relation::FeatureTags
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
