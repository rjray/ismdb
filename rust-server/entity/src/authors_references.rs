//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize,
)]
#[sea_orm(table_name = "authors_references")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub author_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub reference_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::authors::Entity",
        from = "Column::AuthorId",
        to = "super::authors::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Authors,
    #[sea_orm(
        belongs_to = "super::references::Entity",
        from = "Column::ReferenceId",
        to = "super::references::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    References,
}

impl Related<super::authors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Authors.def()
    }
}

impl Related<super::references::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::References.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
