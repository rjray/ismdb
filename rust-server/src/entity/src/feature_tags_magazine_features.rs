//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "feature_tags_magazine_features")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub feature_tag_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub magazine_feature_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::feature_tag::Entity",
        from = "Column::FeatureTagId",
        to = "super::feature_tag::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    FeatureTag,
    #[sea_orm(
        belongs_to = "super::magazine_feature::Entity",
        from = "Column::MagazineFeatureId",
        to = "super::magazine_feature::Column::ReferenceId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    MagazineFeature,
}

impl Related<super::feature_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FeatureTag.def()
    }
}

impl Related<super::magazine_feature::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MagazineFeature.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
