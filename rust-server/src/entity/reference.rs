//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize,
)]
#[sea_orm(table_name = "references")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub language: Option<String>,
    pub reference_type_id: i32,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::book::Entity")]
    Book,
    #[sea_orm(has_one = "super::magazine_feature::Entity")]
    MagazineFeature,
    #[sea_orm(has_one = "super::photo_collection::Entity")]
    PhotoCollection,
    #[sea_orm(
        belongs_to = "super::reference_type::Entity",
        from = "Column::ReferenceTypeId",
        to = "super::reference_type::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ReferenceType,
}

impl Related<super::book::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Book.def()
    }
}

impl Related<super::magazine_feature::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MagazineFeature.def()
    }
}

impl Related<super::photo_collection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoCollection.def()
    }
}

impl Related<super::reference_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReferenceType.def()
    }
}

impl Related<super::author::Entity> for Entity {
    fn to() -> RelationDef {
        super::authors_references::Relation::Author.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::authors_references::Relation::Reference.def().rev())
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::tags_references::Relation::Tag.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::tags_references::Relation::Reference.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
