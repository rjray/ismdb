//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "MagazineFeatures"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub reference_id: Option<i32>,
    pub magazine_issue_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    #[sea_orm(column_name = "referenceId")]
    ReferenceId,
    #[sea_orm(column_name = "magazineIssueId")]
    MagazineIssueId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    ReferenceId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Option<i32>;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    FeatureTagsMagazineFeatures,
    MagazineIssues,
    References,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::ReferenceId => ColumnType::Integer.def().null().unique(),
            Self::MagazineIssueId => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::FeatureTagsMagazineFeatures => {
                Entity::has_many(super::feature_tags_magazine_features::Entity).into()
            }
            Self::MagazineIssues => Entity::belongs_to(super::magazine_issues::Entity)
                .from(Column::MagazineIssueId)
                .to(super::magazine_issues::Column::Id)
                .into(),
            Self::References => Entity::belongs_to(super::references::Entity)
                .from(Column::ReferenceId)
                .to(super::references::Column::Id)
                .into(),
        }
    }
}

impl Related<super::feature_tags_magazine_features::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FeatureTagsMagazineFeatures.def()
    }
}

impl Related<super::magazine_issues::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MagazineIssues.def()
    }
}

impl Related<super::references::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::References.def()
    }
}

impl Related<super::feature_tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::feature_tags_magazine_features::Relation::FeatureTags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::feature_tags_magazine_features::Relation::MagazineFeatures
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
